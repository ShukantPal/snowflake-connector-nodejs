import { Readable } from 'stream';
import { SnowflakeError } from '../errors';
import Column from './result/column';

interface StreamOptions {
    start?: number;
    end?: number;
    fetchAsString?: Array<"String" | "Boolean" | "Number" | "Date" | "JSON" | "Buffer"> | undefined;
}

enum StatementStatus {
    Fetching = "fetching",
    Complete = "complete",
}

export interface BaseStatement {
    /**
     * Returns this statement's SQL text.
     */
    getSqlText(): string;

    /**
     * Returns the current status of this statement.
     */
    getStatus(): StatementStatus;

    /**
     * Returns the columns produced by this statement.
     */
    getColumns(): Column[];

    /**
     * Given a column identifier, returns the corresponding column. The column
     * identifier can be either the column name (String) or the column index
     * (Number). If a column is specified and there is more than one column with
     * that name, the first column with the specified name will be returned.
     */
    getColumn(columnIdentifier: string | number): Column;

    /**
     * Returns the number of rows returned by this statement.
     */
    getNumRows(): number;

    /**
     * Returns the number of rows updated by this statement.
     *
     * @returns {Number}
     */
    getNumUpdatedRows(): Number | undefined;

    /**
     * Returns an object that contains information about the values of the
     * current warehouse, current database, etc., when this statement finished
     * executing.
     */
    getSessionState(): object | undefined;

    /**
     * Returns the request id that was used when the statement was issued.
     */
    getRequestId(): string;

    /**
  * Returns the query id generated by the server for this statement.
  * If the statement is still executing and we don't know the query id
  * yet, this method will return undefined.
  *
  * Should use getQueryId instead.
  * @deprecated 
  * @returns {String}
  */
    getStatementId(): string

    /**
     * Returns the query id generated by the server for this statement.
     * If the statement is still executing and we don't know the query id
     * yet, this method will return undefined.
     *
     * @returns {String}
     */
    getQueryId(): string;


    /**
     * Cancels this statement if possible.
     * @param fn The callback to use.
     */
    cancel(fn: (err: SnowflakeError | undefined, stmt: BaseStatement) => void): void;

    /**
     * Streams the rows in this statement's result. If start and end values are
     * specified, only rows in the specified range are streamed.
     *
     * @param StreamOptions options
     */
    streamRows(options?: StreamOptions): Readable;
}